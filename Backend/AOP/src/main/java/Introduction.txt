AOP(Aspect-Oriented Programming, 관점 지향 프로그래밍)

애플리케이션의 핵심 비즈니스 로직과 공통적인 기능(횡단 관심사, cross-cutting concerns)을 분리해서 모듈화하는 방법
로깅, 보안(인증, 인가), 트랜잭션 관리 등의 횡단 관심사를 비즈니스 로직과 분리해서 코드의 가독성, 유지보수성과 재활성을 높이는데 유용



주요 개념

횡단관심사	비즈니스 로직과는 별도로 여러 모듈에 걸쳐 공통적으로 사용되는 기능
            예) 로깅, 보안, 트랜잭션 등

애스펙트	    횡단 관심사를 모듈화한 것
(aspect)	한 개 이상의 포이트 컷과 어드바이스의 조합으로 만들어짐

조인포인트	애스팩트가 적용될 수 있는 실행 지점
join point	메서드 호출, 객체 생성, 필드 접근 등이 될 수 있음
		    스프링에서는 메서드 호출 단계만 가능

포인트컷	    애스팩트가 적용될 특정 조인포인트를 정의
pointcut	포인트컷은 조인포인트의 서브셋을 필터링하는 역할
		    정규표현식이나 AspectJ의 문법을 이용해서 어떤 조인포인트를 사용할 것인지를 결정

어드바이스	포인트컷에서 정의한 특정 조인포인트에서 수행될 실제 작업을 의미
advice		어드바이스는 언제(조인포인트 전에, 후에, 예외 발생 시) 실행될지를 정의
		    스프링에서 동작하는 시점에 따라 다섯 종류로 구분

위빙		    애스팩트를 실제 대상 객체에 적용하여 애스팩트와 비즈니스 로직을 결합하는 과정
weaving		위빙은 컴파일 타임, 로드 타임, 런타임에 수행될 수 있음


스프링 AOP는 프록시 패턴을 사용해서 런타임에 위빙을 수행

어드바이스 			    어노테이션
Before advice			@Before			    대상 메서드가 실행되기 전에 적용할 어드바이스를 정의
After returning advice	@AfterReturning	    대상 메서드가 성공적으로 실행되고 결과값을 반환한 후 적용할 어드바이스를 정의
After throwing advice	@AfterThrowing  	대상 메서드에서 예외가 발생했을 때 적용할 어드바이스를 정의
After advice			@After			    대상 메서드의 정상 수행 여부와 상관없이 무조건 실행되는 어드바이스를 정의
Around adivce			@Around			    대상 메서드의 호출 전후, 예외 발생 등 모든 시점에 적용할 수 있는 어드바이스를 정의

스프링 프레임워크에서 AOP 기능을 사용하기 위해서는 spring-aop 모듈이 필요 ⇒ spring-context 모듈을 추가하면 자동으로 추가



