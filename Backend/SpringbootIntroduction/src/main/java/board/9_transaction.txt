트랜잭션

트랜잭션을 적용하지 않는 경우
    게시판 상세 조회 → 조회수를 증가시키고, 게시판 정보를 조회
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        두 가지가 함께 처리되어야 함 ⇒ 트랜잭션 적용 대상


        @Override
        public BoardDto selectBoardDetail(int boardIdx) {
            boardMapper.updateHitCnt(boardIdx);
            int i = 10 / 0;				⇐ 오류를 발생시키는 코드를 추가
            return boardMapper.selectBoardDetail(boardIdx);
        }


    게시판 목록 조회 → 조회수 확인 → 게시판 상세 조회 → 오류 발생 → 게시판 목록 조회 → 조회수 확인
                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
선언적 트랜잭션 관리 ⇒ @Transactional 어노테이션을 이용해서 트랜잭션을 적용
    어노테이션만 사용하면 되기 때문에 쉽게 적용할 수 있음
    원하는 클래스 또는 메서드 단위로 트랜잭션을 설정하는 것이 가능
    새로운 메서드 또는 클래스를 만들 때 마다 어노테이션을 적용해야 함
    외부 라이브러리를 사용하는 경우, 해당 라이브러리 코드를 편집할 수 없는 제한 사항이 발생 ⇒ AOP를 이용해서 트랜잭션을 구현

트랜잭션을 적용할 클래스에 @Transactional 어노테이션을 추가 ⇒ BoardServiceImpl
@Transactional
@Service
public class BoardServiceImpl implements BoardService {
	... (생략) ...


결과 확인
게시판 목록 조회 → 조회수 확인 → 게시판 상세 조회 → 오류 발생 → 게시판 목록 조회 → 조회수 확인
                                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                    조회수가 증가하지 않는 것을 확인
                                                                    ⇒ rollback
                                                                    ⇒ 트랜잭션 처리가 되고 있음


BoardServiceImpl 클래스에 적용한 @Transactional 어노테이션을 메서드에 적용하는 것으로 변경
// @Transactional
@Service
public class BoardServiceImpl implements BoardService {

    @Transactional
    @Override
    public BoardDto selectBoardDetail(int boardIdx) {
        boardMapper.updateHitCnt(boardIdx);
        int i = 10 / 0;
        return boardMapper.selectBoardDetail(boardIdx);
    }

	... (생략) ...


결과 확인 ⇒ 동일


AOP를 이용해서 트랜잭션을 설정

    import java.util.Arrays;

    import org.springframework.aop.Advisor;
    import org.springframework.aop.aspectj.AspectJExpressionPointcut;
    import org.springframework.aop.support.DefaultPointcutAdvisor;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.transaction.PlatformTransactionManager;
    import org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource;
    import org.springframework.transaction.interceptor.RollbackRuleAttribute;
    import org.springframework.transaction.interceptor.RuleBasedTransactionAttribute;
    import org.springframework.transaction.interceptor.TransactionInterceptor;

    @Configuration
    public class TransactionAspect {

        // 트랜잭션 관리자
        @Autowired
        private PlatformTransactionManager tractionManger;

        // 트랜잭션 인터셉터 정의
        // 트랜잭션 관리자를 사용해서 트랜잭션 시작, 커밋, 롤백 등의 처리를 수행
        @Bean
        TransactionInterceptor transactionAdvice() {
            TransactionInterceptor transactionInterceptor = new TransactionInterceptor();
            transactionInterceptor.setTransactionManager(tractionManger);

            // 모든 메서드에 동일한 트랜잭션 속성을 적용
            MatchAlwaysTransactionAttributeSource source = new MatchAlwaysTransactionAttributeSource();

            // 트랜잭션 속성을 정의 -> 트랜잭션 이름, 롤백 규칙
            RuleBasedTransactionAttribute transactionAttribute = new RuleBasedTransactionAttribute();
            transactionAttribute.setName("*");
            transactionAttribute.setRollbackRules(Arrays.asList(new RollbackRuleAttribute(Exception.class)));
            source.setTransactionAttribute(transactionAttribute);

            transactionInterceptor.setTransactionAttributeSource(source);

            return transactionInterceptor;
        }

        // AOP 포이트컷과 어드바이저 설정
        @Bean
        Advisor transactionAdviceAdvisor() {
            AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
            pointcut.setExpression("execution(* board..service.*Impl.*(..))");

            return new DefaultPointcutAdvisor(pointcut, transactionAdvice());
        }
    }

BoardServiceImpl 클래스에서 @Transactional 어노테이션을 제거 후 테스트를 진행
    // @Transactional
    @Service
    public class BoardServiceImpl implements BoardService {

        // @Transactional
        @Override
        public BoardDto selectBoardDetail(int boardIdx) {
            boardMapper.updateHitCnt(boardIdx);
            int i = 10 / 0;
            return boardMapper.selectBoardDetail(boardIdx);
        }

            ...(생략)...

