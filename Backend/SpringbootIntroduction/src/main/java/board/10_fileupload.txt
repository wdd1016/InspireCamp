파일 업로드와 다운로드

파일 정보를 저장할 테이블을 생성
    create table t_file (
        idx int(10) unsigned not null auto_increment comment '일련번호',
        board_idx int(10) unsigned not null comment '게시글 번호',
        original_file_name varchar(255) not null comment '원본 파일 이름',
        stored_file_path varchar(500) not null comment '파일 저장 경로',
        file_size int(15) unsigned not null comment '파일 크기',
        created_id varchar(50) not null comment '작성자 아이디',
        created_dt datetime not null comment '작성 일시',
        updator_id varchar(50) null comment '수정자 아이디',
        updator_dt datetime null comment '수정 시간',
        deleted_yn char(1) not null default 'N' comment '삭제 여부',
        primary key (idx));

업로드 관련 설정을 추가 ⇒ application.properties
    spring.application.name=board

    spring.datasource.hikari.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    spring.datasource.hikari.jdbc-url=jdbc:log4jdbc:mysql://localhost:3306/springbootdb?useUnicode=true&characterEncoding=utf-8&serverTimeZone=Asia/Seoul

    spring.datasource.hikari.username=springboot
    spring.datasource.hikari.password=p@ssw0rd
    spring.datasource.hikari.connection-test-query=select 1

    spring.servlet.multipart.enabled=true
    spring.servlet.multipart.location=uploads
    spring.servlet.multipart.max-file-size=10MB
    spring.servlet.multipart.max-request-size=30MB

    logging.level.root=OFF
    logging.level.board=debug
    logging.pattern.console=%d{HH:mm:ss.SSS} %highlight(%-5p) %cyan(%c) %m%n

    logging.level.jdbc.sqlonly=info
    logging.level.jdbc.resultsettable=info


업로드 파일을 저장할 디렉터리를 생성
    > mkdir uploads

글쓰기 페이지(boardWrite.html)에 파일을 첨부할 수 있도록 수정
    <!DOCTYPE html>
    <html xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8">
        <title>게시판</title>
        <link rel="stylesheet" th:href="@{/css/board.css}" />
    </head>
    <body>
        <div class="container">
            <h2>게시판 등록</h2>
            <form id="frm" method="post" action="/board/insertBoard.do" enctype="multipart/form-data">
    	        <table class="board_detail">
    	            <tr>
    	               <td>제목</td>
    	               <td><input type="text" id="title" name="title" /></td>
    	            </tr>
    	            <tr>
    	               <td colspan="2"><textarea id="contents" name="contents"></textarea></td>
    	            </tr>
    	        </table>
    	        <input type="file" id="files" name="files" multiple="multiple" />
    	        <input type="submit" id="submit" value="저장" class="btn" />
    	    </form>
        </div>
    </body>
    </html>

컨트롤러를 변경
    // 글 저장 요청을 처리하는 메서드
    @PostMapping("/board/insertBoard.do")
    public String insertBoard(BoardDto boardDto, MultipartHttpServletRequest request) throws Exception {
        boardService.insertBoard(boardDto, request);
        return "redirect:/board/openBoardList.do";
    }


BoardService
    public interface BoardService {
        List<BoardDto> selectBoardList();
        void insertBoard(BoardDto boardDto, MultipartHttpServletRequest request);
        BoardDto selectBoardDetail(int boardIdx);
        void updateBoard(BoardDto boardDto);
        void deleteBoard(int boardIdx);
    }

BoardServiceImpl
    @Slf4j
    @Service
    public class BoardServiceImpl implements BoardService {
        @Autowired
        private BoardMapper boardMapper;

        @Override
        public List<BoardDto> selectBoardList() {
            return boardMapper.selectBoardList();
        }

        @Override
        public void insertBoard(BoardDto boardDto, MultipartHttpServletRequest request) {
            // 로그인한 사용자를 글쓴이로 설정
            // TODO. 로그인한 사용자의 ID로 변경
            // boardDto.setCreatedId("hong");
            // boardMapper.insertBoard(boardDto);

            if (!ObjectUtils.isEmpty(request)) {
                // <input type="file" name="이 속성의 값" />
                Iterator<String> fileTagNames = request.getFileNames();
                while(fileTagNames.hasNext()) {
                    String fileTagName = fileTagNames.next();
                    // 하나의 <input type="file" multiple="multiple"> 태그를 통해서 전달된 파일들을 가져옮
                    List<MultipartFile> files = request.getFiles(fileTagName);
                    for (MultipartFile file : files) {
                        log.debug("File Information");
                        log.debug("- file name: " + file.getOriginalFilename());
                        log.debug("- file size: " + file.getSize());
                        log.debug("- content type: " + file.getContentType());
                    }
                }
            }
        }

    		... (생략) ...


파일 정보를 저장할 DTO를 생성
    @Data
    public class BoardFileDto {
        private int idx;
        private int boardIdx;
        private String originalFileName;
        private String storedFilePath;
        private String fileSize;
    }

파일 처리를 위한 유틸리티 클래스를 생성
    @Component
    public class FileUtils {
        @Value("${spring.servlet.multipart.location}")
        private String uploadDir;

        // 요청을 통해서 전달받은 파일을 저장하고, 파일 정보를 반환하는 메서드
        public List<BoardFileDto> parseFileInfo(int boardIdx, MultipartHttpServletRequest request) throws Exception {
            if (ObjectUtils.isEmpty(request)) {
                return null;
            }

            List<BoardFileDto> fileInfoList = new ArrayList<>();
            // 파일을 저장할 디렉터리를 설정
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyyMMdd");
            ZonedDateTime now = ZonedDateTime.now();
            String imageDir = Paths.get(System.getProperty("user.dir"), uploadDir, "images").toString();
            File fileDir = new File(imageDir);
            if (!fileDir.exists()) {
                fileDir.mkdir();
            }
            String storedDir = Paths.get(imageDir, now.format(dtf)).toString();
            fileDir = new File(storedDir);
            if (!fileDir.exists()) {
                fileDir.mkdir();
            }

            // 업로드 파일 데이터를 디렉터리에 저장하고 정보를 리스트에 저장
            Iterator<String> fileTagNames = request.getFileNames();
            while (fileTagNames.hasNext()) {
                String fileTagName = fileTagNames.next();
                List<MultipartFile> files = request.getFiles(fileTagName);
                for (MultipartFile file : files) {
                    String originalFileExtension = "";

                    // 파일 확장자를 ContentType에 맞춰서 지정
                    if (!file.isEmpty()) {
                        String contentType = file.getContentType();
                        if (ObjectUtils.isEmpty(contentType)) {
                            break;
                        } else {
                            if (contentType.contains("image/jpeg")) {
                                originalFileExtension = ".jpg";
                            } else if (contentType.contains("image/png")) {
                                originalFileExtension = ".png";
                            } else if (contentType.contains("image/gif")) {
                                originalFileExtension = ".gif";
                            } else {
                                break;
                            }
                        }

                        // 저장에 사용할 파일 이름을 조합
                        String storedFileName = Long.toString(System.nanoTime()) + originalFileExtension;

                        // 파일 정보를 리스트에 저장
                        BoardFileDto dto = new BoardFileDto();
                        dto.setBoardIdx(boardIdx);
                        dto.setFileSize(Long.toString(file.getSize()));
                        dto.setOriginalFileName(file.getOriginalFilename());
                        dto.setStoredFilePath(storedDir + storedFileName);
                        fileInfoList.add(dto);

                        // 파일 저장
                        String finalDir = Paths.get(storedDir, storedFileName).toString();
                        fileDir = new File(finalDir);
                        file.transferTo(fileDir);
                    }
                }
            }

            return fileInfoList;
        }
    }

테스트
    이미지 파일을 업로드하면 "uploads" 폴더 아래에 "images\날짜" 폴더가 만들어지고, "시간.확장자" 형식의 파일이 저장된 것을 확인할 수 있음

참고: 파일 업로드 취약점
    외부에서 업로드하는 파일의 크기와 개수, 종류를 제한하지 않고, 외부에서 접근 가능한 경로에 파일을 저장했을 때 발생    ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        |                   |                     서버에서 실행 가능한 파일을 외부에서 실행
                        |                   +-- 서버에서 실행 가능한 파일 또는 악성 행위를 수행하는 파일을
                        |                       업로드 가능
                        |                       ⇒ 서버의 제어권을 탈취 (웹쉘)
                        |                       ⇒ 해당 서버가 악성 코드 유포지로 악용
                        +-- 서버의 연결 자원과 디스크(저장소) 자원을 고갈시켜 정상적인 서비스를 방해


    방어 기법
    외부에서 업로드하는 파일의 크기, 개수, 종류를 제한
                                           ~~~~~~~~~~~
                                           확장자 검증, Content-Type 검증, Magic Code(Number)
    업로드 파일을 외부에서 접근할 수 없는 경로에 저장 ⇒ 저장된 파일을 제공하려면
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~	          다운로드 기능이 필요
                  Web Document Root 밖의 디렉터리를 의미
    업로드 파일명, 확장자, 저장경로 등을 외부에서 알 수 없도록 변경해서 사용
    파일의 실행 권한을 제거하고 저장
