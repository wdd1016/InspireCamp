인터셉터(Interceptor)
    스프링 프레임워크에서 특정 요청을 가로채고 처리하기 위해 사용되는 도구
    주로 요청 전후에 공통된 작업을 실행하거나, 요청을 처리하는 컨트롤로로 가기 전에 요청을 변경 또는 검사할 때 사용

스프링 MVC에서 인터셉터는 HandlerInterceptor 인터페이스를 상속받아서 구현
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
    컨트롤러가 호출되기 전에 실행
    true를 반환하면 다음 인터셉터 또는 컨트롤러가 호출되고, false를 반환하면 요청 처리를 중단

    postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)
    컨트롤러 실행 후 결과를 뷰로 보내기 전에 수행
    ModelAndView 객체를 통해 뷰에 전달할 데이터 조작이 가능

    afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception e)
    뷰 렌더링 후 호출
    주로 리소스를 정리하거나 로깅 등의 작업에 사용

요청의 시작과 끝에 로그를 출력하는 인터셉터를 작성
    @Slf4j
    public class LoggerInterceptor implements HandlerInterceptor {
        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
                throws Exception {
            log.debug("************** START **************");
            log.debug(" Request URI \t" + request.getRequestURI());
            return true;
        }

        @Override
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,
                @Nullable Exception ex) throws Exception {
            log.debug("**************  END  **************");
        }
    }

LoggerInterceptor 등록
스프링 4.0 이상에서는 자바 기반 설정을 지원
    WebMvcConfigurer 인터페이스를 상속받는 설정 클래스를 추가
    @Configuration
    public class WebMvcConfiguration implements WebMvcConfigurer {
        @Override
        public void addInterceptors(InterceptorRegistry registry) {
            registry.addInterceptor(new LoggerInterceptor());
        }
    }
