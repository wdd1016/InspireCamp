게시판 테이블 생성
    create table t_board (
        board_idx 	int(11) 		not null auto_increment 	comment "글 번호",
        title 		varchar(300)	not null 			comment "제목",
        contents		text		not null			comment "내용",
        hit_cnt		smallint(10)	not null default "0" 		comment "조회수",
        created_dt		datetime	not null 			comment "작성일시",
        created_id		varchar(300)	not null 			comment "작성자",
        updator_dt		datetime	null 				comment "수정일시",
        updator_id		varchar(300)	null 				comment "수정자",
        deleted_yn		char(1)		not null default "N" 		comment "삭제여부",
        primary key (board_idx)
    );

DAL(Data Access Layer, 데이터 접근 계층)
    애플리케이션의 다른 부분과 저장소 간의 상호작용을 담당하는 계층
    비즈니스 로직과 데이터 접근 코드를 분리해 애플리케이션의 유지 보수성과 확장성을 높이는 것을 목적

DAO(Data Access Object)
    데이터베이스와 상호작용을 담당하는 객체
    개발자는 SQL을 사용해 CRUD 기능을 직접 구현해야 함
    애플리케이션의 Object      (SQL을 이용해 CRUD)      DB의 Record 단위의 처리
                   ~~~~~~             ^                      ~~~~~~
                     |                |                         |
                     +----------------|-------------------------+
                                      |
                             불일치를 해결해야 함

Data Source
    DB와 관련된 연결(Connection) 정보를 담고 있으며, 빈(bean)으로 등록해 인자로 넘겨 줌  → 이 과정을 통해 스프링은 DataSource로 DB와 연결을 획득
    JDBC 드라이버 벤더 별로 여러가지가 존재 ⇒ 일반적으로 connectionURL, username, password, jdbcDriver 등으로 구성

JDBC(Java DataBase Connectivity)
    DB에 접근할 수 있도록 Java에서 제공하는 API
    데이터에이스에서 자료를 추가, 검색, 수정, 삭제하는 방법을 제공
    Plain JDBC API 문제점
    쿼리 실행 전후에 많은 코드를 작성해야 함
    예외 및 트랜젝션 처리
    매번 쿼리를 실행할 때 마다 수행


    public class SelectExample {
       static final String DB_URL = "jdbc:mysql://localhost/TUTORIALSPOINT";
       static final String USER = "guest";
       static final String PASS = "guest123";
       static final String QUERY = "SELECT id, first, last, age FROM Employees";

       public static void main(String[] args) {
          // Open a connection
          try(Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(QUERY);) {
             // Extract data from result set
             while (rs.next()) {
                // Retrieve by column name
                System.out.print("ID: " + rs.getInt("id"));
                System.out.print(", Age: " + rs.getInt("age"));
                System.out.print(", First: " + rs.getString("first"));
                System.out.println(", Last: " + rs.getString("last"));
             }
          } catch (SQLException e) {
             e.printStackTrace();
          }
       }
    }

JDBC Template
    Plain JDBC API의 문제점을 해결하기 위해 스프링에서 제공하는 Spring JDBC 접근 방법 중 하나
    ~~~~~~~~~~~~~~~~~~~~~~
    DataSource 설정 → Connection 생성 → SQL 작성 → Statement 생성 → Statement 실행 → ResultSet 처리
    → 결과 출력 → Exception 처리 → Transaction 처리 → ResultSet 닫기 → Statement 닫고 → Connection 닫기

    개발자가 수행하는 부분 : SQL 작성, 결과 출력
    JDBC Template이 수행하는 부분 : 나머지

JDBC Driver
    자바 프로그램의 요청을 DBMS가 이해할 수 있는 프로토콜로 변환해 주는 클라이언트 측 어댑터
    DB 마다 Driver가 존재하고, 자신이 사용하는 DB에 맞는 JDBC Driver를 사용
    DataSource를 JDBC Template에 주입하고, JDBC Template은 JDBC Driver를 이용해서 DB에 접근

데이터베이스 연결
    연결에 필요한 정보를 설정 파일에 추가 ⇒ application.properties
        spring.application.name=board
        spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
        spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/springbootdb?useUnicode=true&characterEncoding=utf-8&serverTimeZone=Asia/Seoul
        spring.datasource.hikari.username=springboot
        spring.datasource.hikari.password=p@ssw0rd
        spring.datasource.hikari.connection-test-query=select 1

Connection URL Syntax
    https://dev.mysql.com/doc/connector-j/en/connector-j-reference-jdbc-url-format.html

Configuration Properties
    https://dev.mysql.com/doc/connector-j/en/connector-j-reference-configuration-properties.html
    https://dev.mysql.com/doc/connector-j/en/connector-j-connp-props-session.html#cj-conn-prop_characterEncoding

DatabaseConfiguration.java
    @Configuration
    @PropertySource("classpath:/application.properties")
    public class DatabaseConfiguration {
        @Bean
        @ConfigurationProperties(prefix = "spring.datasource.hikari")
        HikariConfig hikariConfig() {
            return new HikariConfig();
        }

        @Bean
        DataSource dataSource() {
            DataSource dataSource = new HikariDataSource(hikariConfig());
            System.out.println(dataSource);
            return dataSource;
        }

    }