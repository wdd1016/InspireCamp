EC2
-> 탄력적 IP 주소
-> 탄력적 IP 주소 할당

EC2
-> 탄력적 IP 주소
-> 내가만든 탄력적 IP
-> 탄력적 IP 주소 연결
-> 인스턴스 선택
-> 연결

IAM -> 대시보드
-> 사용자 -> 본인 ID -> 권한 추가
-> AmazonS3FullAccess 추가

URL: https://juyoung-bucket-20250326.s3.ap-northeast-2.amazonaws.com/Screenshot+2025-03-19+at+12.34.35%E2%80%AFAM.png
URI: s3://juyoung-bucket-20250326/Screenshot 2025-03-19 at 12.34.35 AM.png

퍼블릭 액세스 차단(버킷 설정)
새 ACL(액세스 제어 목록)을 통해 부여된 버킷 및 객체에 대한 퍼블릭 액세스 차단
으로 변경

객체 소유권 편집 -> ACL 활성화됨

공개할 객체로 접속하여 권한 -> ACL -> 모든 사람, 객체, 읽기

<awscli 터미널 (버킷 사용)>
brew install awscli

IAM -> 보안 자격 증명
IAM -> 사용자 -> Amcamp037 -> 액세스 키 만들기 -> Command Line Interface(CLI)

aws configure
AWS Access Key ID [None]: Access key ID
AWS Secret Access Key [None]: Secret access key
Default region name [None]: ap-northeast-2
Default output format [None]:

aws s3 ls
aws ec2 describe-instances

aws s3 ls juyoung-bucket-20250326
aws s3 cp 'Screenshot 2025-03-25 at 9.30.04 AM.png' s3://juyoung-bucket-20250326
aws s3 cp 's3://juyoung-bucket-20250326/Screenshot 2025-03-25 at 9.30.04 AM.png' ./test.png

Aurora and RDS -> 데이터베이스 생성
MySQL
템플릿 개발/테스트
단일 AZ DB 인스턴스 배포(인스턴스 1개)
DB 인스턴스 식별자 -> juyoung-database-1
마스터 사용자 이름 : admin
마스터 암호: admin123
가용 영역 -> 아무거나

생성된 데이터베이스 -> 보안 그룹
-> 인바운드 규칙에 대해서 MySql(3306), 0.0.0.0/0 <open>

Datagrip 연결
create database myawsdb;
create table myawsdb.users(id int, name varchar(10));

EC2 -> 보안 그룹 -> sg-0336ae6570788303e - launch-wizard-3
8080 포트 추가

(ec2 내부)
mvn --version

sudo yum upgrade
sudo amazon-linux-extras install epel -y
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum install jenkins

systemctl status jenkins
sudo systemctl enable jenkins
sudo systemctl start jenkins
-> Error 발생
-> sudo systemctl status jenkins.service
   sudo journalctl -xe | grep 26914 (jenkins의 PID)
   sudo yum install java-17-amazon-corretto-devel
   sudo alternatives --config java
   java -version
   sudo systemctl start jenkins
   systemctl status jenkins

sudo journalctl -xe | grep 26914 (jenkins의 PID)
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
-> 복사 -> http://3.37.56.195(publicIP):8080/ 을 연결하고 넣기

** Jenkins 작업
1) 초기 플러그인 설치
2) 기본 계정 생성 (admin 등)
3) 초기 설정 -> Maven, JDK, 서버 추가 등
    http://3.37.56.195:8080/manage/configureTools/
        JDK installations
            JDK17
            /usr/lib/jvm/java-17-amazon-corretto.x86_64
        Maven installations
            maven3.8.8
            3.8.8 (Install automatically)
    플러그인 설치 (http://3.37.56.195:8080/manage/pluginManager/available)
        GitHub Integration
        Maven Integration
        Deploy to container
        Publish Over SSH

4) Docker-Server로 사용할 EC2 생성 (toy-msa 이미지 사용)
    Dashboard -> Jenkins 관리 -> System:
        SSH Servers: (추가)
            Name: toy-msa-docker
            Hostname: 13.125.178.15 (docker-server ec2의 public IP)
            Username: ec2-user
            Remote Directory: .
            고급 -> Use Password ~ 체크
            -> Key: juyoung-1st-key.pem 내용 복붙
            Timeout (ms): 600000
        Test Configuration 클릭 - Success 확인!

** Jenkins 를 이용하여 CI/CD
1) Jenkins 에서 프로젝트 빌드
    My-First-AWS-Project: 기존의 My-Second-Project 가져오기
    My-Second-AWS-Project: My-First-AWS-Project에 추가
        Post Steps 지우기
        빌드 후 조치 추가
            Send build artifacts over SSH
                SSH Server
                    Name: toy-msa-docker
                    Transfer Set
                        Source files: target/*.war
                        Remove prefix: target
                        Remote directory: .
                        Exec command: echo -e "FROM tomcat:9.0\nCOPY ./hello-world.war /usr/local/tomcat/webapps/\n" > Dockerfile
                                      docker build --tag hello-world:2.0 -f Dockerfile .;
2) Docker-Server에 결과파일 전송
3) Docker-server에서 container 이미지 빌드
4) container 이미지를 ECR에 전송

<Pipeline>
from My-Pipeline-Params

pipeline {
    agent any;

    tools {
        maven 'maven3.8.8'
    }

    stages {
        stage('Maven Install') {
            agent any
            when {
                expression { params.MAVEN_BUILD == true }
            }
            steps {
                git branch: 'main', url: 'https://github.com/joneconsulting/cicd-web-project'
                sh 'mvn clean compile package -DskipTests=true'
            }
        }

        stage('transfer') {
            steps {
                sshPublisher(publishers: [
                    sshPublisherDesc(configName: 'toy-msa-docker',
                                     transfers: [sshTransfer(
                                                    cleanRemote: false, excludes: '',
                                                    execCommand: 'echo -e "FROM tomcat:9.0\\nCOPY ./hello-world.war /usr/local/tomcat/webapps/\\n" > Dockerfile',
                                                    execTimeout: 120000, flatten: false, makeEmptyDirs: false,
                                                    noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.',
                                                    remoteDirectorySDF: false, removePrefix: 'target', sourceFiles: 'target/*.war')
                                            ],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: false)
                                ])
            }
        }

        stage('image build') {
            when {
                expression { params.DOCKER_BUILD == true }
            }
            steps {
                script {
                    if (params.DOCKER_IMAGE_TAG != "") {
                        echo "[docker image tag is not null]"
                        env.IMAGE_TAG = params.DOCKER_IMAGE_TAG
                    } else {
                        echo "[docker image tag is null]"
                        env.IMAGE_TAG = env.BUILD_NUMBER
                    }
                    echo "Final imageTag: ${env.IMAGE_TAG}"
                }
                sshPublisher(publishers: [
                    sshPublisherDesc(configName: 'toy-msa-docker',
                                     transfers: [sshTransfer(
                                                 cleanRemote: false, excludes: '',
                                                 execCommand: 'docker build --tag hello-world:1.9 -f Dockerfile .',
                                                 execTimeout: 600000, flatten: false, makeEmptyDirs: false,
                                                 noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.',
                                                 remoteDirectorySDF: false, removePrefix: 'target', sourceFiles: 'target/*.war')
                                     ],
                         usePromotionTimestamp: false,
                         useWorkspaceInPromotion: false,
                         verbose: true)
                         ])
            }
        }
    }
}